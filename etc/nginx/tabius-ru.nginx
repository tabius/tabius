server {
    server_name tabius.ru;

    # Fix urls with multiple forward slashes (we had them historically in the sitemap)
    if ($request_uri ~ "//") {
        return 301 $uri;
    }

    # Angular Universal
    location / {
        proxy_pass http://127.0.0.1:12101;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;

        # remove headers we do not want to expose
        proxy_hide_header X-Powered-By;

        if ($request_uri ~* \.(css|js|jpg|jpeg|png|gif|svg)$) {
            expires max;
        }
    }

    # NestJS
    location /api {
        proxy_pass http://127.0.0.1:12100/api;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;

        # remove headers we do not want to expose
        proxy_hide_header X-Powered-By;
    }

    location ^~ /images {
        alias /opt/tabius/images;
    }

    location /robots.txt {
        alias /opt/tabius/www/robots.txt;
    }

    location /sitemap.xml {
        alias /opt/tabius/www/sitemap.xml;
    }

    location ~ ^/sitemap-([0-9]+).txt.gz {
        alias /opt/tabius/www/sitemap-$1.txt.gz;
    }

    location ~ ^/artist/(.*) {
        return 301 /chords/$1;
    }

    # Build artifacts in root folder
    location ~* \.(png|ico|gif|jpg|jpeg|css|js|map)$ {
        root /opt/tabius/browser;
        expires max;
    }

    #    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    server_tokens off;

    gzip on;
    gzip_types text/plain application/xml application/json text/xml text/css application/javascript text/javascript image/svg+xml;
    gzip_min_length 1000;

    listen 443 ssl http2; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/tabius.ru/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/tabius.ru/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}

server {
    if ($host = tabius.ru) {
        return 301 https://$host$request_uri;
    } # managed by Certbot

    server_name tabius.ru;
    listen 80;
    return 404; # managed by Certbot
}
