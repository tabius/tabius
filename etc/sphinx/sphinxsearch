#! /bin/sh

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=/usr/bin/searchd
NAME=sphinxsearch
DESC=sphinxsearch

test -x $DAEMON || exit 0

LOGDIR=/var/log/sphinxsearch
PIDFILE=/var/run/sphinxsearch/searchd.pid
DODTIME=1                   # Time to wait for the server to die, in seconds
                            # If this value is set too low you might not
                            # let some servers to die gracefully and
                            # 'restart' will not work

STARTDELAY=0.5

set -e

running_pid()
{
    # Check if a given process pid's cmdline matches a given name
    pid=$1
    name=$2
    [ -z "$pid" ] && return 1
    [ ! -d /proc/$pid ] &&  return 1
    cmd=`cat /proc/$pid/cmdline | tr "\000" "\n"|head -n 1 |cut -d : -f 1`
    # Is this the expected child?
    [ "$cmd" != "$name" ] &&  return 1
    return 0
}

running()
{
# Check if the process is running looking at /proc
# (works for all users)

    # No pidfile, probably no daemon present
    [ ! -f "$PIDFILE" ] && return 1
    # Obtain the pid and check it against the binary name
    pid=`cat $PIDFILE`
    running_pid $pid $DAEMON || return 1
    return 0
}

do_force_stop() {
# Forcefully kill the process
    [ ! -f "$PIDFILE" ] && return
    if running ; then
        kill -15 $pid
        # Is it really dead?
        [ -n "$DODTIME" ] && sleep "$DODTIME"s
        if running ; then
            kill -9 $pid
            [ -n "$DODTIME" ] && sleep "$DODTIME"s
            if running ; then
                echo "Cannot kill $LABEL (pid=$pid)!"
                exit 1
            fi
        fi
    fi
    rm -f $PIDFILE
    return 0
}

do_start() {
        start-stop-daemon --start --pidfile $PIDFILE --exec ${DAEMON} -- -c /home/ram/work/tabius-ru/etc/sphinx/sphinx.conf
}
do_stop() {
        start-stop-daemon --stop --quiet --oknodo --pidfile $PIDFILE \
            --exec $DAEMON
}

case "$1" in
  start)
        echo -n "Starting $DESC: "
        do_start
        [ -n "$STARTDELAY" ] && sleep $STARTDELAY

        if running ; then
            echo "$NAME is started."
        else
            echo " ERROR."
        fi
        ;; 

  stop)
        	echo -n "Stopping $DESC: "
	if running ; then
        	do_stop
        	echo "stopped."
	else	
		echo "already stopped."
        fi
        ;;

  force-stop)
        if running ; then
	        echo -n "Forcefully stopping $DESC: "
        	do_force_stop
		echo "stopped."
	else
		echo -n "$NAME is already stopped. Forcing: "
		do_force_stop
		echo "stopped."
        fi
        ;;
  restart|reload|force-reload)
    echo -n "Restarting $DESC: "
        do_stop
        [ -n "$DODTIME" ] && sleep $DODTIME
        do_start
        echo "$NAME is restarted."
        ;;

  status)
    echo -n "$NAME is "
    if running ;  then
        echo "running."
    else
        echo "not running."
        exit 1
    fi
    ;;
  *)
    N=/etc/init.d/$NAME
    # echo "Usage: $N {start|stop|restart|reload|force-reload}" >&2
    echo "Usage: $N {start|stop|restart|force-reload|status|force-stop}" >&2
    exit 1
    ;;
esac

exit 0
